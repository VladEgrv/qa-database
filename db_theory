# БД
База данных -  совокупность данных, хранимых в соответствии с какой-либо схемой, манипулирование которыми выполняют в соответствии с выбранным ПО для управления.
Признаки БД:
1) хранится в памяти устройства.
2) данные как-то структурированны и систематизированны, для облегчения поиска (не обязательно, например логи)
3) БД включает схему хранения, метаданные и тд (не обязательно, например монго)

Не путать СУБД и БД. БД это сами данные, СУБД это выбранное ПО для управления этими данными.

Практически любая база данных имеет 4 базовые операции:
- Create - добавление данных
- Read/Retreive - чтение, получение данных
- Update - обновление данных
- Delete - удаление данных

Примерная классификация:
- Иерархическая (Аналогия - файловая система)
- Сетевая (Аналогия - сеть железнодорожных станций)
- Реляционная (Упрощенно - табличная)
- Объектно-реляционная
- Объектная
- Функциональная

# Реляционные БД

Relation (отношение) - (упрощенно) таблица, в которой все строки отличаются друг от друга.

Принципы:
- Данные хранятся в таблицах (отношениях), состоящих из столбцов (атрибутов, полей) и строк (кортежей)
- На пересечении строки и столбца находится только одно значение
- У каждого столбца есть свое имя и все значения в этом столбце имеют один тип
- Столбцы располагаются в определенном порядке, в отличие от строк, которые могут быть расположены в произвольном порядке. 
- Минимум 1 столбец. Строк может не быть. 
- Запросы к базе данных возвращают результат в виде таблиц.

Результат запроса - это всегда таблица. Отсюда возможности:

- Результат запроса можно записать в базу в виду таблицы
- Одинаковые результаты двух запросов можно объединить в одну таблицу
- Результат запроса можно использовать в качестве предмета для дальнейших запросов

### Ключи

##### Первичный ключ/Primary key
Явно и однозначно определяет конкретную запись (строку) в таблице БД

*В таблице не может быть двух записей с одинаковым первичным ключом*

Виды по типу
- Логический (естественный) - серия/номер паспорта
- Суррогатный (искусственный) - если логический выделить не удается, просто нумеруешь столбец

Виды по составу
- Простой - 1 атрибут (артикул)
- Составной - несколько атрибутов (серия + номер паспорта)

##### Внешний ключ/Foreign Key
- Внешние ключи позволяют установить связи между таблицами. 
- Внешний ключ устанавливается для столбцов из зависимой, подчиненной таблицы, и указывает на один из столбцов из главной таблицы. 
- Как правило, внешний ключ указывает на первичный ключ из связанной главной таблицы.


Целостность БД - соответствие данных БД правилам, по которым эта база данных строится (значение массы не может быть отрицательным, при ограничении лет не должно быть значений больше миниального заданного и тд.)
Чтобы соблюдать целостность нужны ограничения целостности БД.

Все ограничения целостности можно разделить на три категории:
- Целостность полей - все значения в таблицах соответствуют условиям для полей, в которых они вносятся
- Целостность таблицы - все кортежи имеют уникальный primary key, отсутствуют одинаковые кортежи
- Целостность ссылок - подразумевает отношения между первичным ключом (таблицы, на которую ссылаются) и внешним ключом (таблицы, которая ссылается на другую) всегда защищенными. Пока есть связь Primary key из внешней таблицы и foreign key из основной не удаляются и не изменяются.



### Нормализация БД 
это процесс организации данных определенным образом и рекомендации по проектированию. В основном за счет декомпозиции.
То есть таблицы и связи между ними (отношения) создаются в соответствии с правилами. 
В результате обеспечивается нужный уровень безопасности данных, а сама база становится более гибкой. Также устраняются несогласованные зависимости и избыточность. 
По сути - формализованный здравый смысл.

Нормальные формы.
- 1 НФ - в каждой клетке одно значение, нет повторяющихся строк
- 2 НФ - таблица в 1 НФ, есть primary key, все атрибуты зависят от primary key целиком, а не от какой либо его части (основное решение - декомпозиция).
- 3 НФ - таблица во 2 НФ, все аттрибуты зависят ТОЛЬКО от первичного ключа, но не от других аттрибутов
- НФ Бойса-Кодда (усиленная 3 НФ) - таблица в 3 НФ, ключевые аттрибуты не зависят от неключевых
- 4 НФ - таблица в НФ БК, устранены многозначные зависимости (когда на один primary key множество значений из нескольких полей)
- 5 НФ - таблица в 4 НФ, устраняются нетривиальные зависимости, декомпозиция без потерь. Можно выяснить соответствие ТОЛЬКО при знании предметной области. После джойна таблиц будет всегда получаться таблица, которая была до декомпозиции.
- 6 НФ - хз
- Доменно-ключевая НФ - хз


### Проектирование БД

Этапы:
- концептуальное (инфологическое) проектирование. Наиболее абстрактный уровень, без ориентации на СУБД и модели данных, включает в себя просто описание объектов или понятий предметной области и их связей, плюс ограничения целостности (требования к допустимым значениям данных). Применяются em-diagram (сущность-связь)
![Снимок экрана от 2023-08-24 16-49-10](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/1a62c361-b268-4da4-a082-4524d9cb129f)

- логическое (даталогическое) проектирование. Создание схемы на основе конкретной модели, указываются ключи и связи с помощью ключей. Учитывается специфика модели данных.
![Снимок экрана от 2023-08-24 16-50-22](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/593159b5-b2e0-4d54-8c78-b80483e19d27)

- физическое проектирование. Создание модели на основе конкретной СУБД. Ограничения на именования, типы данных, выбор памяти, разделение по файлам и устройствам, распредление методов доступа, индексирование.
  ![Снимок экрана от 2023-08-24 16-51-09](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/76b457f1-3ac3-4a08-a950-26f1d7807810)

## SQL
sql - декларативный язык программирования. мы не задаем правил обработки данных, а только говорим что хотим получить.
### SQL элементы

операторы определения данных (Data Definition Language, DDL):
- CREATE создаёт объект базы данных (саму базу, таблицу, представление, пользователя и так далее),
- ALTER изменяет объект,
- DROP удаляет объект;

операторы манипуляции данными (Data Manipulation Language, DML):
- SELECT выбирает данные, удовлетворяющие заданным условиям,
- INSERT добавляет новые данные,
- UPDATE изменяет существующие данные,
- DELETE удаляет данные;

операторы определения доступа к данным 
(Data Control Language, DCL):
- GRANT предоставляет пользователю (группе) разрешения на определённые операции с объектом,
- REVOKE отзывает ранее выданные разрешения,
- DENY задаёт запрет, имеющий приоритет над разрешением;

операторы управления транзакциями 
(Transaction Control Language, TCL):
- COMMIT применяет транзакцию,
- ROLLBACK откатывает все изменения, сделанные в контексте текущей транзакции,
- SAVEPOINT делит транзакцию на более мелкие участки.

#### Типы данных

- Целочисленные
![Снимок экрана от 2023-08-24 17-25-16](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/6fd13b88-7c89-492c-a2a6-c3ddf376c938)
Указание в скобках числа (напр. int(3) это справочно-сервисная информация для отображения ширины столбца)
- Дробные числа
  ![Снимок экрана от 2023-08-24 17-26-15](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/9b5a2e51-89bc-4b78-ad1d-2c91d0b1b009)
  М - отводимые под число символы. D - символы дрообной части. UNSIGNED - запрет на отрицательные значения.
- Строки
  ![Снимок экрана от 2023-08-24 17-26-42](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/8c39f3b0-efd2-4a68-81bc-fca4fa53556c)
- Текстовые и бинарные
![Снимок экрана от 2023-08-24 17-27-28](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/c6b79170-5772-487e-8bf4-782e8f2c5309)
blob лежат как двоичные данные, text в кодировке.
- Составные
  ![Снимок экрана от 2023-08-24 17-28-14](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/eab048ab-4124-47cc-9ca6-7a42533d83be)
- Временные
  ![Снимок экрана от 2023-08-24 17-29-16](https://github.com/VladEgrv/KnowledgeBase/assets/89786420/2cf467d3-f4fe-4b2c-80b6-17af233f5b54)

NULL - это не значение, а отсутствие значения. При любых булевых операциях с NULL выдастся NULL, поэтому надо использовать IS NULL или IS NOT NULL.
  

### Принципы создания
- стараться использовать типы данных минимального размера
- простые типы - сравнение чисел проще чем строк, использовать встроенные типы (не нужно писать даты в строки)
- стараться избегать NULL
